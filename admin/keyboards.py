from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from admin.texts import AdminButtons

def admin_main_kb():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ (–∏–Ω–ª–∞–π–Ω)"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=AdminButtons.REQUESTS, callback_data="nav:requests"),
                InlineKeyboardButton(text=AdminButtons.USERS, callback_data="nav:users")
            ],
            [
                InlineKeyboardButton(text=AdminButtons.STATS, callback_data="nav:stats"),
                InlineKeyboardButton(text=AdminButtons.BROADCAST, callback_data="nav:broadcast")
            ],
            [
                InlineKeyboardButton(text=AdminButtons.MARZBAN, callback_data="admin:marzban")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
            ]
        ]
    )

def moder_kb():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–∏–Ω–ª–∞–π–Ω)"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=AdminButtons.REQUESTS, callback_data="nav:requests"),
                InlineKeyboardButton(text=AdminButtons.STATS, callback_data="nav:stats")
            ],
            [
                InlineKeyboardButton(text=AdminButtons.BACK, callback_data="nav:main")
            ]
        ]
    )

def cancel_kb():
    """–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=AdminButtons.CANCEL, callback_data="nav:cancel")]
        ]
    )

def confirm_broadcast_kb():
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=AdminButtons.CONFIRM, callback_data="action:broadcast:confirm"),
                InlineKeyboardButton(text=AdminButtons.CANCEL, callback_data="nav:cancel")
            ]
        ]
    )

def requests_list_kb(requests, offset=0, limit=10):
    """–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –∑–∞—è–≤–æ–∫
    for request in requests[offset:offset+limit]:
        buttons.append(
            [InlineKeyboardButton(
                text=f"#{request['id']} @{request['username']}",
                callback_data=f"nav:requests:detail:{request['id']}"
            )]
        )
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination = []
    if offset > 0:
        pagination.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"nav:requests:page:{max(0, offset-limit)}"
            )
        )
    if offset + limit < len(requests):
        pagination.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                callback_data=f"nav:requests:page:{offset+limit}"
            )
        )
    if pagination:
        buttons.append(pagination)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append(
        [InlineKeyboardButton(text=AdminButtons.BACK, callback_data="nav:main")]
    )
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def request_actions_kb(request_id):
    """–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–æ–π"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=AdminButtons.APPROVE,
                    callback_data=f"action:requests:approve:{request_id}"
                ),
                InlineKeyboardButton(
                    text=AdminButtons.REJECT,
                    callback_data=f"action:requests:reject:{request_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text=AdminButtons.BACK,
                    callback_data="nav:requests"
                )
            ]
        ]
    )

def users_list_kb(users, offset=0, limit=10):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in users[offset:offset+limit]:
        status_icon = "üü¢" if not user.get('is_banned', False) else "üî¥"
        buttons.append(
            [InlineKeyboardButton(
                text=f"{status_icon} @{user['username']} ({user['status']})",
                callback_data=f"nav:users:detail:{user['id']}"
            )]
        )
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination = []
    if offset > 0:
        pagination.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"nav:users:page:{max(0, offset-limit)}"
            )
        )
    if offset + limit < len(users):
        pagination.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                callback_data=f"nav:users:page:{offset+limit}"
            )
        )
    if pagination:
        buttons.append(pagination)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append(
        [InlineKeyboardButton(text=AdminButtons.BACK, callback_data="nav:main")]
    )
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def user_actions_kb(user_id, is_banned):
    """–î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=AdminButtons.UNBAN if is_banned else AdminButtons.BAN,
                    callback_data=f"action:users:unban:{user_id}" if is_banned else f"action:users:ban:{user_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text=AdminButtons.BACK,
                    callback_data="nav:users"
                )
            ]
        ]
    )
