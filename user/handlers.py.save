from aiogram import F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram import Router
from aiogram.fsm.state import State, StatesGroup
from config import Config
from database import get_marzban_username, update_telegram_id
from user.keyboards import (
    get_user_main_menu,
    get_subscription_actions,
    get_apps_keyboard,
    get_back_button
)
from user.texts import UserTexts
from user.services import UserService
import logging

# Инициализация роутера
user_router = Router()
user_router.message.filter(F.from_user.id != Config.ADMIN_ID)

logger = logging.getLogger(__name__)

class UserStates(StatesGroup):
    waiting_transfer_id = State()

@user_router.message(Command("start"))
async def user_start(message: types.Message):
    """Обработчик команды /start"""
    await message.answer(
        UserTexts.START,
        reply_markup=get_user_main_menu()
    )

@user_router.callback_query(F.data == "my_subscription")
async def show_subscription(callback: types.CallbackQuery):
    """Информация о подписке"""
    try:
        subscription = await UserService.get_user_subscription(callback.from_user.id)
        
        if not subscription:
            await callback.message.edit_text(
                UserTexts.NO_SUBSCRIPTION,
                reply_markup=get_back_button()
            )
            return

        await callback.message.edit_text(
            UserTexts.subscription_info(**subscription),
            reply_markup=get_subscription_actions()
        )
    except Exception as e:
        logger.error(f"Subscription error: {e}")
        await callback.message.edit_text(
            UserTexts.SUBSCRIPTION_ERROR,
            reply_markup=get_back_button()
        )

@user_router.callback_query(F.data == "download_app")
async def show_apps(callback: types.CallbackQuery):
    """Приложения для скачивания"""
    await callback.message.edit_text(
        UserTexts.APPS_MENU,
        reply_markup=get_apps_keyboard()
    )

@user_router.callback_query(F.data == "setup_guide")
async def setup_guide(callback: types.CallbackQuery):
    """Инструкция по настройке"""
    await callback.message.edit_text(
        UserTexts.SETUP_GUIDE,
        reply_markup=get_back_button()
    )

@user_router.callback_query(F.data == "transfer_subscription")
async def start_transfer(callback: types.CallbackQuery, state: FSMContext):
    """Начало переноса подписки"""
    await callback.message.edit_text(
        UserTexts.TRANSFER_REQUEST,
        reply_markup=get_back_button()
    )
    await state.set_state(UserStates.waiting_transfer_id)

@user_router.message(UserStates.waiting_transfer_id)
async def process_transfer(message: types.Message, state: FSMContext):
    """Обработка переноса подписки"""
    new_telegram_id = message.text.strip()
    
    if not new_telegram_id.isdigit():
        await message.answer(
            UserTexts.INVALID_TRANSFER_ID,
            reply_markup=get_back_button()
        )
        return

    telegram_id = message.from_user.id
    marzban_username = await get_marzban_username(telegram_id)

    if not marzban_username:
        await message.answer(
            UserTexts.NO_SUBSCRIPTION_TO_TRANSFER,
            reply_markup=get_back_button()
        )
        await state.clear()
        return

    try:
        await update_telegram_id(marzban_username, int(new_telegram_id))
        await message.answer(
            UserTexts.TRANSFER_SUCCESS.format(
                username=marzban_username,
                new_id=new_telegram_id
            ),
            reply_markup=get_user_main_menu()
        )
    except Exception as e:
        logger.error(f"Transfer error: {e}")
        await message.answer(
            UserTexts.TRANSFER_ERROR,
            reply_markup=get_back_button()
        )
    finally:
        await state.clear()

@user_router.callback_query(F.data == "how_to_use")
async def how_to_use(callback: types.CallbackQuery):
    """Инструкция по использованию"""
    await callback.message.edit_text(
        UserTexts.HOW_TO_USE,
        reply_markup=get_back_button()
    )

@user_router.callback_query(F.data == "support")
async def support(callback: types.CallbackQuery):
    """Поддержка"""
    await callback.message.edit_text(
        UserTexts.support(Config.SUPPORT_USERNAME),
        reply_markup=get_back_button()
    )

@user_router.callback_query(F.data == "back_to_user_menu")
async def back_to_menu(callback: types.CallbackQuery):
    """Возврат в главное меню"""
    await callback.message.edit_text(
        UserTexts.MAIN_MENU,
        reply_markup=get_user_main_menu()
    )
