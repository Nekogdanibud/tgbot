from aiogram import F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram import Router
from aiogram.fsm.state import State, StatesGroup
from config import Config
from database import get_marzban_username, update_telegram_id
from user.keyboards import (
    get_user_main_menu,
    get_subscription_actions,
    get_apps_keyboard,
    get_back_button
)
import requests
import logging
from utils import get_marzban_token, format_traffic

user_router = Router()
user_router.message.filter(F.from_user.id != Config.ADMIN_ID)

logger = logging.getLogger(__name__)

class UserStates(StatesGroup):
    waiting_transfer_id = State()

@user_router.message(Command("start"))
async def user_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN —Å–µ—Ä–≤–∏—Å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_user_main_menu()
    )

@user_router.callback_query(F.data == "my_subscription")
async def show_subscription(callback: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    telegram_id = callback.from_user.id
    marzban_username = await get_marzban_username(telegram_id)
    
    if not marzban_username:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=get_back_button()
        )
        return

    try:
        token = await get_marzban_token()
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(
            f"{Config.MARZBAN_URL}/api/user/{marzban_username}",
            headers=headers
        )
        response.raise_for_status()
        user_data = response.json()

        traffic_used = format_traffic(user_data.get("used_traffic", 0))
        traffic_total = format_traffic(user_data.get("data_limit", 0))
        expiry_date = user_data.get("expire", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        await callback.message.edit_text(
            f"üìã –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {marzban_username}\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_used}\n"
            f"–í—Å–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞: {traffic_total}\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expiry_date}",
            reply_markup=get_subscription_actions()
        )
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_button()
        )

@user_router.callback_query(F.data == "download_app")
async def show_apps(callback: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
        reply_markup=get_apps_keyboard()
    )

@user_router.callback_query(F.data == "setup_guide")
async def setup_guide(callback: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN."""
    await callback.message.edit_text(
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN:\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'.\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞.\n"
        "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        reply_markup=get_back_button()
    )

@user_router.callback_query(F.data == "transfer_subscription")
async def start_transfer(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Telegram ID –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:",
        reply_markup=get_back_button()
    )
    await state.set_state(UserStates.waiting_transfer_id)

@user_router.message(UserStates.waiting_transfer_id)
async def process_transfer(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ Telegram ID –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É."""
    new_telegram_id = message.text.strip()
    
    if not new_telegram_id.isdigit():
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).",
            reply_markup=get_back_button()
        )
        return

    telegram_id = message.from_user.id
    marzban_username = await get_marzban_username(telegram_id)

    if not marzban_username:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞.",
            reply_markup=get_back_button()
        )
        await state.clear()
        return

    try:
        await update_telegram_id(marzban_username, int(new_telegram_id))
        await message.answer(
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {marzban_username} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {new_telegram_id}.",
            reply_markup=get_user_main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_button()
        )
    finally:
        await state.clear()

@user_router.callback_query(F.data == "how_to_use")
async def how_to_use(callback: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–µ—Ä–≤–∏—Å–∞."""
    await callback.message.edit_text(
        "‚ÑπÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN —Å–µ—Ä–≤–∏—Å:\n"
        "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞'.\n"
        "2. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'.\n"
        "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ'.\n"
        "4. –î–ª—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'.",
        reply_markup=get_back_button()
    )

@user_router.callback_query(F.data == "support")
async def support(callback: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    await callback.message.edit_text(
        "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n"
        f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ @{Config.SUPPORT_USERNAME}",
        reply_markup=get_back_button()
    )

@user_router.callback_query(F.data == "back_to_user_menu")
async def back_to_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_user_main_menu()
    )
